Task 1 code begin

# mapper.py
#!/usr/bin/env python2.7

import sys
import os

from collections import Counter

INPUT_FILE = os.getenv('map_input_file').rsplit('/', 1)[1]


for line in sys.stdin:
    tokens = line.strip().split()
    counter = Counter(tokens)
    for token, count in counter.items():
        print('{0} {1}\t{2}'.format(token, INPUT_FILE, count))


# reducer.py
#!/usr/bin/env python2.7

import sys

from itertools import groupby
from operator import itemgetter


def parse(stream):
    for line in stream:
        keys, count = line.split('\t', 1)
        word, doc = keys.split(' ', 1)
        yield word, doc, int(count)


# first group by word
for word, counts in groupby(parse(sys.stdin), key=itemgetter(0)):
    counter = []
    # next group by doc
    for (word, doc), meh in groupby(counts, key=itemgetter(0, 1)):
        word_freq = sum(count for (word, doc, count) in meh)
        counter.append((doc, word_freq))

    print('{0}:\t{1}:\t{2}'.format(word, len(counter), counter))


# hadoop commands

hadoop jar /opt/hadoop/hadoop-0.20.2/contrib/streaming/hadoop-0.20.2-streaming.jar -input /user/s1250553/ex2/task1/large -output /user/s1140740/task_1.tmp.out -mapper mapper.py -reducer reducer.py -file task1/mapper.py -file task1/reducer.py -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner -jobconf map.output.key.field.separator=' ' -jobconf num.key.fields.for.partition=1

hadoop jar /opt/hadoop/hadoop-0.20.2/contrib/streaming/hadoop-0.20.2-streaming.jar -input /user/s1140740/task_1.tmp.out -output /user/s1140740/task_1.out -mapper cat -reducer cat -jobconf mapred.reduce.tasks=1

Task 1 code end

Task 1 results begin

Task 1 results end

Task 2 code begin

# mapper.py
#!/usr/bin/env python2.7

import sys
import os

from collections import Counter

INPUT_FILE = os.getenv('map_input_file').rsplit('/', 1)[1]
TERMS = set()

with open('terms.txt') as terms_file:
    for term in terms_file:
        TERMS.add(term.strip())

for line in sys.stdin:
    tokens = line.strip().split()
    counter = Counter(token for token in tokens if token in TERMS)
    for token, count in counter.items():
        print('{0} {1}\t{2}'.format(token, INPUT_FILE, count))


# reducer.py
#!/usr/bin/env python2.7

import sys
import math

from itertools import groupby
from operator import itemgetter

N = 17
DOC = 'd1.txt'
TERMS = set()


def parse(stream):
    for line in stream:
        keys, count = line.split('\t', 1)
        word, doc = keys.split(' ', 1)
        yield word, doc, int(count)


with open('terms.txt') as terms_file:
    for term in terms_file:
        TERMS.add(term.strip())

for word, counts in groupby(parse(sys.stdin), key=itemgetter(0)):
    TERMS.discard(word)
    counter = {}
    # next group by doc
    for (word, doc), meh in groupby(counts, key=itemgetter(0, 1)):
        counter[doc] = sum(count for (word, doc, count) in meh)
    occurences = len(counter)
    tf = counter.get(DOC, 0)
    idf = math.log10(N / (1. + occurences))
    print('{0}, {1} = {2}'.format(word, DOC, tf * idf))

for word in TERMS:
    print('{0}, {1} = {2}'.format(word, DOC, 0))


# hadoop command
hadoop jar /opt/hadoop/hadoop-0.20.2/contrib/streaming/hadoop-0.20.2-streaming.jar -input /user/s1250553/ex2/task1/large -output /user/s1140740/task_2.out -mapper mapper.py -reducer reducer.py -file task2/mapper.py -file task2/reducer.py -file task2/terms.txt -jobconf mapred.reduce.tasks=1

Task 2 code end

Task 2 results begin

Lassiter, d1.txt = 0.0
agreement, d1.txt = 0.531478917042
child, d1.txt = 6.524311868
family, d1.txt = 1.14151090877
horse, d1.txt = 2.57155048062
monument, d1.txt = 0.62838893005
electronic, d1.txt = 0

Task 2 results end

Task 3.1 code begin

# mapper.py
#!/usr/bin/env python2.7

import sys
import re

from itertools import groupby
from operator import itemgetter


def parse(stream):
    for line in stream:
        match = re.match(r'^\s*(.*?)\s+- -\s+?\[(.*?)\]\s*?"([A-Z]+)\s+?(.*?)\s+?(.+?)"\s+(\d+)\s+(\d+|-)\s*$', line)
        if match is not None:
            yield match.groups()


for url, reqs in groupby(parse(sys.stdin), key=itemgetter(3)):
    print('{0}\t{1}'.format(url, sum(1 for req in reqs))) 


# reducer.py
#!/usr/bin/env python2.7

import sys

from itertools import groupby
from operator import itemgetter


def parse(stream):
    for line in stream:
        url, count = line.split('\t', 1)
        yield url, int(count)


max_url = None
max_count = 0

for url, counts in groupby(parse(sys.stdin), key=itemgetter(0)):
    total_count = sum(count for url, count in counts)
    if total_count > max_count:
        max_url = url
        max_count = total_count

if max_url is not None:
    print('{0}\t{1}'.format(max_url, max_count))


# hadoop command
hadoop jar /opt/hadoop/hadoop-0.20.2/contrib/streaming/hadoop-0.20.2-streaming.jar -input /user/s1250553/ex2/task2/logsLarge.txt -output /user/s1140740/task_3.1.out -mapper mapper.py -reducer reducer.py -file task3.1/mapper.py -file task3.1/reducer.py


# unix commands
hadoop dfs -get /user/s1140740/task_3.1.out task3.1/out
cat task3.1/out/* | sort -nrk2,2 | head -n 1

Task 3.1 code end

Task 3.1 results begin

/images/NASA-logosmall.gif  97293

Task 3.1 results end

Task 3.2 code begin

# mapper.py
#!/usr/bin/env python2.7

import sys
import re

from itertools import groupby
from operator import itemgetter


def parse(stream):
    for line in stream:
        match = re.match(r'^\s*(.*?)\s+- -\s+?\[(.*?)\]\s*?"([A-Z]+)\s+?(.*?)\s+?(.+?)"\s+(\d+)\s+(\d+|-)\s*$', line)
        if match is not None:
            groups = match.groups()
            status = groups[5]
            if status == '404':
                yield groups


for host, reqs in groupby(parse(sys.stdin), key=itemgetter(0)):
    print('{0}\t{1}'.format(host, sum(1 for req in reqs))) 


# reducer.py
#!/usr/bin/env python2.7

import sys
import heapq

from itertools import groupby
from operator import itemgetter


HEAP = []
N = 10


def parse(stream):
    for line in stream:
        host, count = line.split('\t', 1)
        yield host, int(count)


for url, counts in groupby(parse(sys.stdin), key=itemgetter(0)):
    total_count = sum(count for url, count in counts)
    if len(HEAP) == N:
        # if heap full, pop smallest
        heapq.heappushpop(HEAP, (total_count, url))
    else:
        # if not full, just push
        heapq.heappush(HEAP, (total_count, url))

# HEAP now has top 10 questions
for count, url in HEAP:
    print('{0}\t{1}'.format(url, count))


# hadoop command
hadoop jar /opt/hadoop/hadoop-0.20.2/contrib/streaming/hadoop-0.20.2-streaming.jar -input /user/s1250553/ex2/task2/logsLarge.txt -output /user/s1140740/task_3.2.out -mapper mapper.py -reducer reducer.py -file task3.2/mapper.py -file task3.2/reducer.py


# unix commands
hadoop dfs -get /user/s1140740/task_3.2.out task3.2/out
cat task3.2/out/* | sort -nrk2,2 | head -n 10

Task 3.2 code end

Task 3.2 results begin

dialip-217.den.mmc.com  62
piweba3y.prodigy.com    47
155.148.25.4    44
maz3.maz.net    39
gate.barr.com   38
ts8-1.westwood.ts.ucla.edu  37
nexus.mlckew.edu.au 37
m38-370-9.mit.edu   37
204.62.245.32   37
scooter.pa-x.dec.com    35

Task 3.2 results end

Task 3.3 code begin

# mapper.py
#!/usr/bin/env python2.7

import sys
import re

from datetime import datetime
from itertools import groupby
from operator import itemgetter


def parse(stream):
    for line in stream:
        match = re.match(r'^\s*(.*?)\s+- -\s+?\[(.*?)\]\s*?"([A-Z]+)\s+?(.*?)\s+?(.+?)"\s+(\d+)\s+(\d+|-)\s*$', line)
        if match is not None:
            yield match.groups()


for host, reqs in groupby(parse(sys.stdin), key=itemgetter(0)):
    # set min and max to None
    min_tstamp = max_tstamp = None 
    for req in reqs:
        # drop timezone
        date_str = req[1].rsplit(' ', 1)[0]
        date = datetime.strptime(date_str, '%d/%b/%Y:%H:%M:%S')
        # safe casting to int bc no milliseconds
        tstamp = int(date.strftime('%s'))
        if max_tstamp is None or tstamp > max_tstamp:
            max_tstamp = tstamp
        elif min_tstamp is None or tstamp < min_tstamp: 
            min_tstamp = tstamp
    if min_tstamp is not None:
        print('{0} {1}'.format(host, min_tstamp))
    if max_tstamp is not None:
        print('{0} {1}'.format(host, max_tstamp))


# reducer.py
#!/usr/bin/env python2.7

import sys

from itertools import groupby
from operator import itemgetter


def parse(stream):
    for line in stream:
        host, tstamp = line.split(' ', 1)
        yield host, int(tstamp)


for host, tstamps in groupby(parse(sys.stdin), key=itemgetter(0)):
    min_tstamp = next(tstamps)[1]
    max_tstamp = None
    for host, tstamp in tstamps:
        max_tstamp = tstamp
    if max_tstamp is not None:
        # no max found => only one timestamp
        print('{0}\t{1}'.format(host, max_tstamp - min_tstamp))
    else:
        print('{0}\t{1}'.format(host, min_tstamp))


# hadoop command
hadoop jar /opt/hadoop/hadoop-0.20.2/contrib/streaming/hadoop-0.20.2-streaming.jar -input /user/s1250553/ex2/task2/logsLarge.txt -output /user/s1140740/task_3.3.out -mapper mapper.py -reducer reducer.py -file task3.3/mapper.py -file task3.3/reducer.py -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner -jobconf map.output.key.field.separator=' ' -jobconf num.key.fields.for.partition=1


# unix commands
hadoop dfs -get /user/s1140740/task_3.3.out task3.3/out
cat task3.3/out/* | head -n 10

Task 3.3 code end

Task 3.3 results begin

02-17-05.comsvc.calpoly.edu 182
1.ts2.mnet.medstroms.se 1032387
101.irri.cgiar.org  43
12-105da.acs.calpoly.edu    799
121.27.inmarsat.org 9
128.100.87.74   42
128.100.95.2    808318790
128.102.142.245 7
128.102.143.217 427453
128.102.146.223 1030837

Task 3.3 results end

Task 4.1 code begin

# mapper.py
#!/usr/bin/env python2.7

import sys
import io
import xml.etree.ElementTree as ET


def make_post(serial):
    root = ET.fromstring(serial)
    return root.attrib


for line in sys.stdin:
    post = make_post(line.strip())
    if post['PostTypeId'] == '1':
        # is a question
        print('{0}\t{1}'.format(post['Id'], post['ViewCount']))


# reducer.py
#!/usr/bin/env python2.7

import sys
import heapq


HEAP = []
N = 10

for line in sys.stdin:
    question, count = line.strip().split('\t')
    count = int(count)
    if len(HEAP) == N:
        # if heap full, pop smallest
        heapq.heappushpop(HEAP, (count, question))
    else:
        # if not full, just push
        heapq.heappush(HEAP, (count, question))

# HEAP now has top 10 questions
for count, question in HEAP:
    print('{0},\t{1}'.format(question, count))


# hadoop command
hadoop jar /opt/hadoop/hadoop-0.20.2/contrib/streaming/hadoop-0.20.2-streaming.jar -input /user/s1250553/ex2/task3/stackLarge.txt -output /user/s1140740/task_4.1.out -mapper mapper.py -reducer reducer.py -file task4.1/mapper.py -file task4.1/reducer.py


# unix commands
hadoop dfs -get /user/s1140740/task_4.1.out task4.1/out
cat task4.1/out/* | sort -nrk2,2 | head -n 10

Task 4.1 code end

Task 4.1 results begin

184618, 1782717
503093, 1240007
25969,  1075873
194812, 1058604
426258, 989328
363681, 978463
114543, 962440
134845, 938463
306583, 913899
63447,  868645

Task 4.1 results end

Task 4.2 code begin

# mapper.py
#!/usr/bin/env python2.7

import sys
import xml.etree.ElementTree as ET

from itertools import groupby
from operator import itemgetter


def make_post(serial):
    root = ET.fromstring(serial)
    return root.attrib


def parse(stream):
    for line in stream:
        post = make_post(line.strip())
        # sometimes answers do not have owner id
        if post['PostTypeId'] == '2' and 'OwnerUserId' in post:
            yield post


for owner, posts in groupby(parse(sys.stdin), key=itemgetter('OwnerUserId')):
    # prints OwnerUserId <TAB> Q1_ID <TAB> Q2_ID ...
    print('{0}\t{1}'.format(owner, '\t'.join(post['ParentId'] for post in posts)))


# reducer.py
#!/usr/bin/env python2.7

import sys

from itertools import chain, groupby
from operator import itemgetter


def parse(stream):
    for line in stream:
        # there could be more questions on one line
        owner, rest = line.strip().split('\t', 1)
        qs = rest.split('\t')
        yield owner, qs


max_owner = None
max_qs = []

for owner, q_lists in groupby(parse(sys.stdin), key=itemgetter(0)):
    questions = list(chain(*(q_list for owner, q_list in q_lists)))
    if len(questions) > len(max_qs):
        max_owner = owner
        max_qs = questions

if max_owner is not None:
    print('{0}\t->\t{1}'.format(max_owner, ', '.join(max_qs)))


# hadoop command
hadoop jar /opt/hadoop/hadoop-0.20.2/contrib/streaming/hadoop-0.20.2-streaming.jar -input /user/s1250553/ex2/task3/stackLarge.txt -output /user/s1140740/task_4.2.out -mapper mapper.py -reducer reducer.py -file task4.2/mapper.py -file task4.2/reducer.py


# unix commands
hadoop dfs -get /user/s1140740/task_4.2.out task4.2/out
cat task4.2/out/* | awk -F\, '{print NF"\t"$0}' | sort -nrk1,1 | head -n 1 | cut -f 2-

Task 4.2 code end

Task 4.2 results begin

22656   ->  139592, 181643, 183685, 156815, 168393, 176267, 149233, 164144, 194165, 157254, 139260, 186385, 183473, 197302, 186115, 197297, 154112, 186467, 153573, 186007, 183479, 144783, 197241, 145371, 162879, 197182, 197174, 176196, 183367, 197005, 178976, 186082, 196936, 188864, 183315, 144516, 187414, 157219, 145509, 157557, 155458, 194304, 187068, 183250, 164643, 186523, 157198, 173080, 162335, 186527, 188977, 176106, 154489, 173272, 161556, 154463, 161231, 143947, 183033, 163183, 161822, 156369, 188510, 187576, 185987, 187602, 137454, 182749, 185124, 145856, 182683, 164468, 194436, 190227, 169378, 190299, 194450, 193731, 143997, 157055, 155780, 137448, 157354, 196094, 148078, 177363, 194464, 182600, 192599, 161633, 177373, 186600, 153048, 131871, 197482, 168150, 185072, 155260, 188184, 194496, 148298, 137688, 148074, 162303, 146155, 194528, 141423, 182440, 177538, 139592, 146204, 164425, 190376, 174585, 187633, 186653, 193873, 178888, 161477, 174662, 187289, 162727, 162571, 188141, 156430, 171332, 162696, 151936, 162112, 188134, 186643, 152313, 159705, 177506, 171664, 146358, 148882, 188120, 161942, 176264, 181427, 154551, 186964, 169220, 9033, 183856, 177836, 177835, 154680, 179337, 171717, 174498, 195606, 161184, 161432, 178026, 194676, 185690, 187983, 187695, 190936, 188769, 155378, 178188, 155209, 144176, 152613, 187989, 188688, 178255, 188693, 152900, 168169, 164369, 141467, 191153, 178333, 191151, 139837, 174155, 186891, 192121, 164192, 162007, 149211, 178516, 154483, 191333, 142003, 187742, 300376, 282468, 282317, 365086, 364986, 283143, 283241, 364155, 283374, 283476, 283492, 283487, 364009, 283513, 283511, 283487, 283669, 283679, 363569, 363596, 283763, 363549, 283749, 284063, 362955, 362740, 284336, 362719, 284093, 362632, 362555, 362441, 362424, 284678, 362278, 362326, 362224, 362150, 362124, 284896, 362111, 362112, 362059, 362042, 285087, 285177, 285238, 285292, 285523, 361371, 285793, 285846, 360241, 360234, 360151, 286399, 359935, 360111, 286508, 286481, 286533, 286605, 286632, 359732, 359625, 359436, 359320, 287037, 359206, 359085, 287142, 287178, 287195, 358894, 358714, 358654, 358645, 358546, 358196, 287551, 287592, 287598, 287663, 287684, 287646, 287899, 288061, 356972, 356785, 288794, 288808, 356091, 289307, 355875, 355933, 289496, 289452, 355787, 355620, 355340, 289770, 289845, 355282, 290061, 290189, 290238, 290227, 290304, 290527, 290645, 290602, 290819, 291080, 353491, 291286, 291340, 353342, 291387, 291413, 291415, 353224, 353131, 353028, 291828, 352618, 352592, 352471, 352472, 352433, 352415, 352234, 352266, 292265, 352177, 352117, 352089, 292676, 292536, 292988, 293007, 350991, 293114, 293256, 293254, 350240, 350120, 293814, 293882, 293900, 293905, 293916, 349904, 294138, 349742, 349724, 294171, 294216, 349442, 349460, 349410, 349369, 294553, 349280, 349256, 349251, 349192, 348964, 295005, 295017, 295128, 295110, 295161, 295224, 295287, 295387, 295402, 348175, 348120, 348122, 348037, 295579, 295593, 295626, 295670, 295731, 295736, 295749, 347156, 347235, 347242, 346365, 346762, 346722, 346721, 296650, 296755, 296783, 346313, 346211, 296978, 345562, 297471, 298139, 298277, 344630, 298289, 298305, 344503, 298458, 344380, 298503, 344363, 344327, 344034, 343968, 343869, 343852, 298972, 298976, 343684, 343675, 299117, 299135, 299129, 343457, 343466, 343491, 343457, 343366, 343358, 299439, 299475, 299515, 343100, 299703, 299950, 299987, 300055, 342270, 342268, 342151, 342106, 342080, 341971, 341957, 341949, 300402, 341847, 341848, 300489, 300499, 341029, 301393, 301365, 301354, 301510, 301618, 340525, 340546, 340507, 301809, 340298, 340128, 301960, 340090, 301965, 302032, 302037, 339952, 339912, 302096, 302157, 339862, 339792, 339747, 302303, 339755, 302371, 339699, 302476, 338895, 338712, 338262, 303502, 338024, 337903, 337925, 337744, 337702, 337334, 337254, 337239, 337165, 337144, 337121, 337029, 337038, 336884, 304389, 304483, 304488, 336831, 336775, 336781, 336755, 304640, 336649, 304770, 304782, 304816, 336414, 304859, 336387, 304967, 305154, 305140, 305244, 305358, 335807, 305393, 305519, 305651, 335517, 335450, 305755, 305911, 306085, 306212, 334838, 334779, 334658, 334579, 334415, 334179, 333953, 333829, 333736, 333737, 333655, 333280, 333364, 333242, 333151, 307984, 308061, 308427, 308683, 308954, 308986, 309071, 331217, 309161, 309286, 330963, 309496, 309553, 309631, 309706, 330622, 309734, 330502, 309939, 330318, 330155, 329203, 329129, 329029, 311363, 311710, 327916, 327460, 312184, 312103, 327332, 327286, 312471, 326820, 326757, 326648, 313036, 313062, 326390, 313111, 313127, 326223, 313584, 326098, 313729, 313753, 313910, 325725, 314008, 314033, 325561, 325511, 325524, 314100, 314108, 314203, 325267, 325156, 324727, 324670, 324656, 324604, 314779, 324341, 315139, 315146, 324053, 324066, 315358, 323235, 323230, 323212, 323079, 323032, 316548, 316532, 316582, 316656, 316674, 316727, 316855, 316911, 317026, 317047, 317084, 317134, 321566, 321549, 321423, 321418, 317335, 317462, 317606, 321096, 317619, 317788, 317816, 320814, 320767, 320542, 320396, 319789, 319864, 317825, 318775, 632399, 638142, 642933, 611295, 604252, 624176, 608525, 620024, 643050, 638115, 608530, 651682, 625340, 638216, 624217, 608542, 618216, 654906, 638038, 653882, 618276, 618292, 642123, 637960, 632148, 618182, 643422, 651803, 618190, 642103, 629910, 625928, 638222, 647815, 620198, 642058, 642005, 620234, 625947, 603727, 619716, 641931, 643694, 658654, 654858, 618148, 641911, 629712, 625687, 643775, 641906, 653730, 631994, 623451, 632570, 632606, 641727, 653738, 648814, 620376, 634664, 637672, 626058, 651032, 631919, 644089, 625640, 634693, 654802, 625611, 615168, 629758, 631825, 626115, 644267, 620484, 634727, 648732, 620534, 605215, 626139, 658644, 657735, 626132, 644342, 627478, 620546, 627315, 613699, 648692, 623242, 659148, 623243, 635640, 648700, 605417, 626196, 631651, 655328, 623159, 627267, 605441, 612753, 634777, 658614, 612722, 605498, 644715, 605533, 631550, 631499, 605526, 656072, 652512, 656564, 657685, 615105, 649320, 657664, 631484, 626187, 612689, 649428, 608057, 648576, 654752, 634829, 648553, 657037, 626328, 615334, 653154, 605682, 605726, 654715, 639320, 619434, 605828, 658506, 612592, 608028, 639292, 619448, 605859, 609293, 610870, 618878, 656431, 605891, 657573, 651350, 602326, 655803, 609501, 628119, 622763, 645533, 627172, 654664, 627507, 629798, 622743, 612486, 657112, 625513, 607377, 626935, 628049, 645678, 653674, 655289, 631099, 622710, 610818, 631088, 639166, 651283, 655657, 606109, 656373, 638701, 645826, 601974, 645836, 618835, 612283, 640651, 640613, 657503, 653469, 601804, 653634, 627982, 628843, 659529, 601674, 638828, 630808, 656325, 653596, 654592, 636266, 649471, 649962, 619197, 610743, 640522, 648196, 640502, 640464, 601497, 638881, 601436, 610732, 612253, 630605, 619162, 655751, 648188, 640415, 606524, 614542, 640302, 626707, 648160, 630464, 633656, 612178, 640307, 648115, 648003, 646742, 625465, 646750, 619087, 646779, 627730, 646794, 606636, 629804, 657263, 609963, 610458, 611433, 647779, 606642, 636046, 614713, 610026, 651462, 619033, 650898, 607130, 630045, 610603, 618966, 612058, 649773, 606902, 629411, 635915, 651399, 610001, 635841, 618909, 618535, 621633, 600651, 600607, 657318, 610199, 607587, 600525, 610229, 626889, 647403, 647413, 647425, 647427, 647453, 647499, 626910, 633585, 629955, 626924, 651419, 651055, 606997, 627742, 618267, 619912, 623990, 615377, 608453, 638171, 658868, 624116, 619856, 632383, 602279, 436700, 428001, 368170, 442019, 371702, 379041, 375544, 427363, 388822, 418983, 371398, 388775, 371418, 431967, 442265, 407255, 388708, 425988, 396191, 388718, 380665, 371930, 388642, 401945, 371987, 432833, 407402, 405600, 442245, 444008, 431839, 375831, 415291, 430145, 372033, 380639, 443980, 372075, 446835, 409969, 383735, 372087, 412763, 443935, 401415, 439617, 429890, 388431, 388439, 411447, 443936, 396143, 421797, 398117, 435729, 426505, 401232, 419554, 388375, 388353, 388365, 446262, 401348, 377245, 439897, 377218, 366852, 397760, 366897, 421801, 387893, 425226, 396005, 411478, 443687, 398170, 389426, 409852, 411517, 431785, 411515, 411500, 396009, 392266, 365489, 439086, 380755, 427217, 371026, 431311, 446303, 411572, 380775, 411579, 398212, 411592, 370938, 370920, 412839, 424586, 409846, 375881, 412864, 372639, 402517, 402430, 411631, 380632, 370852, 370831, 370820, 439974, 370801, 371604, 380198, 433526, 389822, 424743, 389813, 442425, 406850, 446320, 445984, 370707, 400900, 380274, 400861, 405429, 425132, 438715, 400866, 408452, 439814, 420646, 421851, 375940, 406830, 383551, 427725, 409807, 439541, 392135, 384247, 383775, 368806, 367577, 370401, 370501, 402936, 389993, 367626, 419796, 406791, 380081, 419788, 406760, 368832, 423247, 443466, 409765, 405379, 390108, 414896, 439166, 438188, 420623, 433475, 392083, 403058, 434039, 387198, 384262, 443423, 403088, 443403, 410026, 414746, 420617, 414749, 427756, 409727, 442022, 436716, 417039, 394921, 394898, 431203, 439255, 405352, 393701, 424760, 427799, 384401, 408310, 405336, 436736, 394957, 436759, 412380, 405333, 413095, 405288, 443310, 446702, 439298, 386741, 436807, 418064, 384489, 446462, 398378, 417954, 419954, 380885, 439302, 446474, 443239, 386584, 366345, 445915, 384511, 366332, 386544, 440016, 414328, 367814, 393322, 430403, 380626, 424443, 367823, 420541, 386500, 414290, 440204, 386493, 446706, 446483, 443170, 380595, 412435, 436954, 409716, 444909, 373541, 419952, 379282, 386341, 417878, 420867, 378856, 386183, 434666, 423794, 437026, 417039, 392787, 423840, 445883, 438492, 434626, 424775, 384633, 374014, 386088, 395232, 423865, 424920, 400100, 428924, 367905, 427902, 378118, 375014, 386017, 395314, 406463, 428896, 380451, 385966, 385949, 420774, 400022, 443000, 385913, 390900, 443010, 385893, 427909, 380512, 433188, 393152, 409611, 407983, 385841, 393169, 385809, 374215, 406433, 385730, 431091, 438431, 434737, 385688, 385709, 442678, 413311, 385714, 374262, 385688, 427941, 434890, 413825, 374316, 442924, 374398, 378259, 410692, 399798, 417039, 417699, 420895, 406361, 374535, 434888, 399770, 406351, 374553, 410417, 399768, 399648, 399760, 374940, 406253, 433106, 374934, 413597, 408101, 427980, 374651, 374673, 396621, 374734, 391462, 406293, 428617, 434761, 374790, 446663, 391557, 452296, 452281, 493388, 475825, 475794, 517751, 480389, 524062, 511477, 459560, 495228, 511378, 524066, 469657, 514833, 489485, 459554, 462879, 511093, 462793, 516309, 495471, 524081, 519324, 455420, 483215, 455409, 479105, 469899, 459538, 510949, 479081, 461475, 495616, 447186, 510863, 469982, 461439, 513234, 464731, 519929, 447408, 510477, 458518, 455237, 478968, 458460, 470311, 458225, 464471, 516399, 510376, 510319, 510341, 525425, 464831, 510214, 464852, 496096, 482466, 525413, 464874, 519631, 463029, 516463, 495004, 468914, 470724, 464941, 515975, 468832, 470789, 464889, 525364, 479565, 484562, 525319, 516569, 470944, 483333, 485240, 470984, 515787, 489304, 515590, 487682, 513672, 523624, 509193, 454891, 519914, 520400, 516617, 523194, 496472, 448158, 454870, 520030, 485398, 448206, 448258, 462348, 516637, 481725, 489173, 490728, 448320, 490677, 496704, 481846, 483054, 457970, 482560, 516689, 490860, 490850, 490896, 448629, 513335, 448653, 511921, 508126, 468388, 508085, 468372, 508054, 508026, 516768, 478167, 507936, 521687, 465238, 478150, 481714, 507649, 478135, 516788, 514948, 468273, 507747, 468266, 519461, 472137, 471693, 468062, 487485, 514953, 497508, 449002, 507343, 487441, 365615, 489258, 497699, 454250, 516882, 454218, 477965, 462311, 523359, 519484, 506807, 460846, 472488, 506648, 516160, 477750, 516964, 482986, 462697, 457482, 491375, 460815, 462699, 479883, 520064, 506295, 491646, 506092, 481314, 479966, 453879, 453451, 481334, 460755, 463419, 453820, 491735, 449760, 519645, 463302, 465313, 460733, 461893, 473087, 477399, 453738, 524351, 519520, 481211, 480007, 498636, 477351, 460698, 522222, 477101, 465627, 491780, 521505, 465706, 457287, 481122, 450350, 514564, 450410, 484212, 520280, 520290, 481068, 450463, 450474, 504645, 483702, 487258, 480033, 493947, 504500, 453538, 460576, 480973, 504367, 460562, 450617, 453479, 488808, 462167, 457128, 524428, 453451, 499210, 462793, 453359, 504103, 499393, 456935, 503996, 450820, 503898, 473998, 503877, 503789, 489317, 474057, 451004, 474184, 519675, 492454, 453163, 453186, 492539, 474259, 476676, 512527, 451035, 474315, 451078, 520527, 495273, 451099, 512266, 519515, 453059, 453023, 503427, 205138, 476534, 466946, 503383, 474450, 474451, 524483, 461988, 452743, 503263, 503218, 524495, 452902, 451228, 460404, 474535, 476422, 503139, 474564, 493673, 487065, 512166, 524503, 466841, 460371, 466799, 523431, 474841, 460364, 500431, 476049, 476217, 502430, 480263, 500508, 502415, 486420, 451647, 456786, 476163, 502346, 515631, 487046, 493033, 480319, 486948, 460300, 466560, 520922, 466565, 486749, 486784, 493177, 493490, 515269, 488601, 452120, 493494, 524567, 500832, 460223, 493311, 512401, 475843, 533902, 573050, 580257, 568724, 533171, 595399, 584134, 573325, 545885, 568852, 533831, 593730, 568780, 538695, 573692, 577132, 527953, 590122, 556203, 586262, 551406, 550702, 598702, 534793, 591144, 586116, 598640, 582725, 586087, 527234, 531976, 527685, 536378, 552844, 566655, 564935, 583414, 561762, 589967, 580896, 536396, 574019, 556510, 586284, 556526, 534846, 538281, 552472, 589966, 551173, 591951, 556265, 578231, 552857, 600022, 559254, 589943, 582575, 594208, 561853, 574787, 550571, 534807, 574809, 559274, 561891, 574824, 579676, 536971, 594230, 589870, 588319, 574868, 538305, 561528, 552909, 578211, 550536, 536435, 594268, 571265, 592064, 556133, 529999, 541936, 535531, 586042, 550143, 536449, 582550, 525711, 574972, 578152, 535972, 527766, 527947, 597819, 551142, 559779, 556310, 594378, 542766, 580887, 535328, 551589, 542770, 566418, 566437, 597788, 542915, 586436, 575202, 581318, 575173, 575217, 581343, 552421, 532816, 566411, 573231, 583123, 597675, 531759, 553035, 593026, 585306, 572647, 597590, 556616, 586037, 589774, 585031, 541487, 540248, 552612, 580867, 593808, 590231, 591632, 561601, 582284, 589737, 590991, 585344, 543263, 577868, 543318, 554767, 582287, 534718, 564699, 585372, 533464, 533922, 577749, 543473, 557112, 570578, 570560, 586193, 570535, 585406, 564557, 586422, 534690, 566860, 555750, 532935, 570471, 526246, 570452, 560123, 570376, 528372, 538121, 533881, 597012, 533426, 585969, 555799, 540947, 570338, 592933, 570302, 582122, 570231, 573539, 537174, 558010, 565095, 565075, 570153, 582095, 590162, 540876, 570123, 555796, 581405, 556006, 573194, 533042, 554345, 538426, 573882, 581967, 564938, 544249, 586363, 554044, 594923, 569903, 554276, 596549, 592934, 528122, 569877, 528999, 573584, 564303, 533872, 596465, 533379, 581949, 569714, 599976, 540708, 596367, 573439, 596339, 554159, 533858, 564816, 549755, 551111, 596065, 561365, 564961, 581448, 592824, 531520, 569614, 535720, 573384, 569522, 544991, 549701, 569525, 534531, 544449, 595110, 585860, 591507, 555982, 529088, 586352, 553905, 577427, 580905, 591273, 540634, 573621, 533767, 583944, 580590, 553857, 573026, 547946, 576660, 577403, 576740, 531315, 569245, 549606, 581730, 576678, 545421, 531380, 568616, 527259, 548007, 545457, 557159, 581722, 577358, 584549, 536798, 595279, 581714, 568671, 549274, 549382, 595810, 585725, 527819, 531151, 566167, 595762, 589351, 569109, 581590, 533332, 573655, 545671, 526555, 535572, 532588, 577280, 576979, 553536, 576912, 555929, 540430, 555871, 568751, 566185, 538729, 213480, 258486, 281970, 211958, 217678, 242904, 270630, 275073, 262096, 255976, 262110, 204627, 207521, 262089, 242930, 232545, 222015, 252014, 268018, 281933, 207592, 270747, 258339, 232558, 217707, 268013, 232535, 213638, 251987, 217645, 213045, 270771, 211958, 239645, 227820, 204564, 207662, 261809, 239306, 269310, 213333, 242745, 251946, 242718, 232732, 262480, 258567, 232748, 262469, 255797, 239202, 262367, 251937, 261428, 213637, 232781, 262547, 224537, 207829, 201255, 243045, 232863, 227731, 270268, 261387, 262618, 258285, 231767, 240836, 233013, 256065, 279374, 242695, 278703, 231741, 242614, 282037, 255813, 207867, 233123, 239865, 233081, 258204, 239888, 256077, 274585, 254784, 267830, 217805, 227575, 262887, 239905, 223249, 282028, 233216, 270187, 227486, 210123, 270093, 233207, 207889, 204739, 201440, 251868, 233243, 270148, 233288, 263023, 258120, 207896, 267765, 204505, 201479, 222245, 227485, 233382, 258691, 255553, 216008, 263151, 207888, 274172, 209281, 261177, 233475, 209304, 204468, 247621, 242577, 231525, 252257, 233579, 263191, 261086, 252751, 261126, 242438, 231480, 242517, 210079, 200755, 200785, 270091, 201616, 243379, 261062, 209354, 233711, 254273, 201607, 247455, 252775, 209389, 213985, 238675, 263347, 247241, 252793, 261028, 268251, 263400, 238660, 207889, 214017, 219851, 275944, 233850, 240047, 268321, 233905, 217980, 242400, 263614, 227083, 252817, 208056, 242393, 212028, 238606, 219815, 234008, 238583, 212089, 254260, 210020, 238555, 238547, 240090, 242264, 242225, 254784, 269594, 240122, 200689, 230869, 209415, 269988, 218025, 252893, 238490, 210353, 282086, 238413, 234059, 221925, 269578, 200691, 282099, 271347, 234239, 222182, 275944, 273949, 225073, 268393, 280114, 234341, 276203, 271384, 214136, 278649, 231159, 240219, 255098, 271404, 230454, 234379, 280127, 226967, 219618, 271398, 219604, 273949, 280172, 206532, 212902, 271440, 276253, 276319, 219519, 220887, 206539, 229508, 208124, 243811, 276383, 200574, 208969, 206512, 254099, 280270, 234591, 257519, 211567, 201930, 276472, 204970, 268530, 208119, 221001, 212124, 253058, 268513, 255645, 222457, 254096, 280426, 201933, 254099, 280439, 208184, 254037, 208193, 268652, 264196, 254009, 234990, 221037, 258988, 234994, 257462, 235003, 271490, 264496, 246572, 253993, 255644, 225194, 208263, 222511, 235025, 267076, 271520, 271530, 268671, 257331, 264575, 246495, 226664, 267059, 246498, 278488, 273301, 221001, 264617, 271561, 244135, 204343, 223679, 255341, 257251, 225233, 221824, 211477, 253211, 235250, 269303, 253937, 271613, 205099, 264718, 244192, 246389, 255341, 271615, 222601, 208325, 228796, 221804, 211448, 246270, 272949, 253226, 235455, 237159, 237377, 235446, 255063, 264984, 221154, 257045, 280634, 223549, 266923, 269669, 214688, 200319, 271710, 257052, 278362, 212614, 206198, 241148, 214584, 277210, 198419, 218322, 266901, 277018, 240258, 280755, 246108, 246112, 277260, 265106, 246096, 265097, 265147, 211143, 241336, 266825, 245607, 202271, 266818, 269613, 246038, 272814, 221287, 265208, 277211, 277309, 259929, 200239, 218888, 269578, 228945, 256566, 214809, 214814, 281325, 271767, 198543, 277351, 240638, 253757, 253780, 277319, 221378, 228987, 241405, 266776, 265370, 259900, 253399, 259887, 241470, 266716, 229015, 229886, 241238, 235003, 281276, 200151, 265585, 208876, 203863, 265639, 205568, 240837, 240863, 259751, 212429, 200079, 259726, 212263, 208532, 229886, 259676, 271767, 229076, 280896, 203695, 208835, 280980, 265849, 218781, 253673, 229844, 218461, 215458, 204139, 241537, 253460, 225686, 277710, 229797, 253468, 215421, 200079, 204208, 253664, 218744, 7074, 277732, 253492, 241238, 225717, 265919, 225985, 244772, 269058, 277783, 281210, 241134, 237041, 244811, 272368, 244826, 229211, 215144, 225953, 198079, 236676, 205411, 277814, 212429, 236676, 278075, 281036, 212401, 278039, 215213, 221691, 222819, 229346, 266308, 272013, 229656, 272153, 277857, 245058, 205458, 266292, 208381, 277869, 229254, 253549, 236676, 236861, 236878, 208753, 266115, 221687, 229554, 244881, 244949, 222790

Task 4.2 results end

Task 4.3 code begin

# mapper.py
#!/usr/bin/env python2.7

import sys
import xml.etree.ElementTree as ET

from itertools import groupby
from operator import itemgetter


def make_post(serial):
    root = ET.fromstring(serial)
    return root.attrib


def parse(stream):
    for line in stream:
        post = make_post(line.strip())
        # sometimes answers do not have owner id
        if (post['PostTypeId'] == '2' and 'OwnerUserId' in post) or (post['PostTypeId'] == '1' and 'AcceptedAnswerId' in post):
            yield post


for post in parse(sys.stdin):
    if post['PostTypeId'] == '2':
        # answer
        print('{0} {1}\t{2}\t{3}'.format(post['ParentId'], post['PostTypeId'], post['Id'], post['OwnerUserId']))
    else:
        # question
        print('{0} {1}\t{2}'.format(post['Id'], post['PostTypeId'], post['AcceptedAnswerId']))


# reducer.py
#!/usr/bin/env python2.7

import sys

from itertools import chain, groupby
from operator import itemgetter


def parse(stream):
    for line in stream:
        keys, rest = line.strip().split('\t', 1)
        vals = rest.split('\t')
        question, typ = keys.split(' ')
        yield question, typ, vals 


def accepted(stream):
    for question, vals in groupby(parse(stream), key=itemgetter(0)):
        # first should be the question
        question, typ, rest = next(vals)
        if typ != '1':
            # not a question => answers but no question
            continue
        accepted_answer = rest[0]
        for q, typ, rest in vals:
            # find user who submitted accepted answer
            if typ == '2':
                answer, user = rest
                if answer == accepted_answer:
                    yield user, accepted_answer
                    break


for user, answers in groupby(accepted(sys.stdin), key=itemgetter(0)):
    print('{0}\t{1}'.format(user, '\t'.join(answer for user, answer in answers)))


# reducer2.py
#!/usr/bin/env python2.7

import sys

from itertools import chain, groupby
from operator import itemgetter


def parse(stream):
    for line in stream:
        # one line could contain multiple answers
        owner, rest = line.strip().split('\t', 1)
        answers = rest.split('\t')
        yield owner, answers


max_owner = None
max_answers = []

for owner, a_lists in groupby(parse(sys.stdin), key=itemgetter(0)):
    answers = list(chain(*(a_list for owner, a_list in a_lists)))
    if len(answers) > len(max_answers):
        max_owner = owner
        max_answers = answers

if max_owner is not None:
    print('{0}\t->\t{1},\t{2}'.format(max_owner, len(max_answers), ', '.join(max_answers)))


# hadoop commands
hadoop jar /opt/hadoop/hadoop-0.20.2/contrib/streaming/hadoop-0.20.2-streaming.jar -input /user/s1250553/ex2/task3/stackLarge.txt -output /user/s1140740/task_4.3.tmp.out -mapper mapper.py -reducer reducer.py -file task4.3/mapper.py -file task4.3/reducer.py -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner -jobconf map.output.key.field.separator=' ' -jobconf num.key.fields.for.partition=1

hadoop jar /opt/hadoop/hadoop-0.20.2/contrib/streaming/hadoop-0.20.2-streaming.jar -input /user/s1140740/task_4.3.tmp.out -output /user/s1140740/task_4.3.out -mapper cat -reducer reducer2.py -file task4.3/reducer2.py -jobconf mapred.reduce.tasks=1

Task 4.3 code end

Task 4.3 results begin

22656   ->  1097,   300008, 402944, 597045, 400888, 300493, 299979, 594276, 605554, 370742, 371508, 336838, 608043, 209002, 516342, 164650, 591165, 338761, 610674, 514840, 427919, 610837, 277790, 246101, 611315, 513684, 277266, 612772, 510358, 613738, 395306, 245077, 527965, 588330, 618226, 504683, 305362, 586105, 275129, 276255, 283676, 233149, 620396, 161565, 620519, 622749, 496167, 272830, 430709, 145516, 627514, 296780, 255834, 214712, 374426, 388742, 388378, 256079, 632162, 578222, 538751, 285809, 233492, 295248, 309005, 349384, 635664, 295040, 242763, 349259, 204508, 483067, 638121, 573628, 641944, 268536, 234751, 294259, 356118, 653183, 570493, 348977, 655668, 436773, 474468, 265885, 568789, 154710, 313590, 657696, 472153, 198136, 658713, 343507, 379058, 417485, 325739, 288827, 450482, 193740, 454299, 197247, 463078, 235459, 462733, 187048, 556009, 153744, 378266, 460824, 298287, 398217, 399811, 427370, 305764, 266319, 253795, 395320, 434963, 151950, 392096, 439311, 252831, 440047, 268600, 443258, 388448, 405733, 271415, 384335, 466974, 238669, 469978, 141468, 474480, 480357, 481724, 232616, 487695, 259695, 230063, 493420, 309766, 499218, 511413, 511489, 162323, 514768, 162774, 221209, 362119, 219001, 359215, 524436, 215462, 532841, 533473, 355806, 213403, 355300, 313069, 542852, 208756, 352631, 352210, 547968, 549762, 205117, 552478, 204744, 204009, 555955, 348045, 201266, 564949, 346085, 655311, 288090, 343862, 315369, 300511, 197299, 577365, 342272, 342016, 582567, 192615, 583440, 651338, 337171, 188148, 648169, 648192, 597660, 648122, 187432, 600016, 186155, 333671, 262631, 293269, 612193, 329106, 618192, 619859, 627213, 296794, 325308, 627757, 630826, 640350, 631834, 636062, 263416, 638848, 213450, 187793, 300418, 300409, 257540, 524514, 200165, 459566, 590137, 344555, 524578, 573217, 414764, 341977, 301977, 589778, 200784, 341062, 340566, 604293, 370811, 340526, 602342, 491591, 556622, 183260, 424612, 601813, 214693, 399772, 241380, 434697, 261067, 398155, 493517, 644287, 552469, 436764, 635934, 349267, 139841, 654756, 480039, 464861, 464971, 265130, 605338, 612267, 479983, 349736, 291357, 229849, 628072, 479095, 237685, 576795, 605832, 290216, 647502, 266846, 439232, 289363, 267089, 352133, 367829, 229023, 268662, 255113, 646780, 270106, 477406, 329209, 423806, 453370, 308962, 287627, 533339, 626936, 428956, 197181, 366905, 629833, 286520, 443203, 239663, 443956, 326667, 221852, 253962, 227569, 476554, 503434, 164398, 186550, 186667, 586280, 324616, 598063, 182515, 244153, 312275, 597686, 276455, 210139, 577300, 446499, 450856, 585373, 640537, 314130, 446671, 406359, 576762, 449035, 223709, 569554, 196117, 511223, 615389, 473122, 317034, 541506, 225077, 386267, 631934, 280293, 385851, 411523, 261146, 606549, 293907, 464886, 581432, 606913, 659177, 337366, 221383, 295597, 472506, 460746, 460350, 232803, 605866, 400908, 164270, 317097, 478177, 657585, 287190, 480313, 481350, 483231, 285849, 317608, 485296, 651428, 629428, 178197, 194514, 550586, 144189, 583958, 574814, 181462, 383782, 254333, 300074, 493501, 282548, 373804, 396026, 543329, 334815, 448635, 570588, 503928, 246529, 551600, 239316, 339798, 371946, 161965, 609981, 330533, 644366, 393179, 366339, 590166, 512471, 619210, 207711, 566659, 434053, 257059, 442282, 618927, 385814, 413864, 272960, 305168, 144069, 241143, 651824, 305412, 309944, 519682, 346735, 208202, 208221, 343886, 413329, 258499, 258585, 386099, 269320, 344340, 344377, 524106, 141528, 431319, 412774, 527778, 213651, 265214, 265031, 639328, 533836, 530014, 658669, 533448, 323220, 394948, 194307, 324078, 567223, 424453, 193879, 425245, 566180, 569253, 609529, 569627, 570170, 565054, 644095, 610767, 201449, 190254, 516999, 573445, 645833, 204581, 406841, 186613, 639196, 648106, 281358, 436957, 648818, 208150, 183696, 209448, 507904, 182767, 439317, 649611, 296985, 557133, 442480, 393173, 519506, 390158, 423875, 390072, 299526, 388834, 555979, 217691, 177561, 520413, 520568, 448272, 274615, 448333, 652580, 302317, 654684, 221941, 586397, 225994, 454895, 371525, 370936, 227833, 460390, 308040, 545437, 269325, 362443, 309528, 361397, 358653, 495622, 157213, 355644, 626964, 466815, 240665, 353065, 266282, 626121, 468873, 154524, 265599, 493387, 242910, 350178, 314831, 349428, 493201, 474288, 246114, 316925, 536996, 475830, 340028, 339894, 536461, 528041, 319911, 336433, 534802, 334595, 534570, 254010, 254053, 321104, 255072, 481853, 619108, 598738, 421868, 532607, 258219, 259732, 531986, 186685, 285368, 552850, 239903, 288802, 239252, 243054, 289520, 538508, 290063, 290340, 533888, 533907, 531321, 292994, 293908, 523449, 295160, 277767, 585415, 298313, 510953, 234395, 144085, 589950, 302172, 489548, 489386, 305163, 305257, 486781, 231536, 178990, 272393, 308689, 600571, 600667, 474859, 271447, 474198, 270641, 470976, 182696, 465731, 465281, 460858, 186003, 615115, 453557, 227598, 227525, 618161, 444000, 618596, 618886, 266764, 438739, 320834, 436817, 191189, 435045, 323261, 428624, 627767, 264740, 326104, 197191, 264478, 327312, 263177, 409876, 638049, 330363, 200142, 643110, 400039, 647432, 333840, 654735, 388793, 657175, 385727, 336797, 378140, 377259, 377263, 375803, 374750, 340174, 372061, 341865, 343691, 344055, 362732, 253619, 213582, 358716, 252790, 252803, 625538, 270173, 212094, 399774, 271575, 271645, 362332, 309636, 173333, 512550, 512335, 359339, 362640, 510388, 304821, 362804, 527837, 508157, 363627, 364024, 506184, 503839, 503387, 222079, 221322, 356977, 177840, 302492, 533878, 496620, 535731, 263257, 495012, 263633, 493735, 493055, 164455, 163261, 370842, 245006, 540649, 299177, 657214, 241670, 552887, 554308, 556039, 556522, 557186, 375926, 657156, 295748, 516581, 246394, 325161, 265994, 564973, 468934, 218485, 519530, 327462, 466574, 293897, 653907, 568655, 465648, 569541, 651062, 569920, 292747, 570606, 457999, 457084, 247623, 453188, 452945, 573568, 333404, 641916, 445886, 577451, 233943, 146167, 640692, 198576, 287217, 585897, 586210, 306131, 594973, 384529, 257252, 605544, 386514, 340554, 279395, 419975, 612067, 634867, 612700, 413106, 614587, 614738, 209319, 619461, 632003, 631672, 389871, 211161, 631552, 624223, 344400, 213710, 188017, 232621, 474585, 352421, 352441, 477333, 258999, 161787, 268699, 269070, 256636, 647795, 555818, 162750, 255638, 271928, 272164, 254908, 253473, 251904, 454312, 487097, 280167, 280236, 281049, 448661, 533289, 282113, 620544, 283269, 283491, 490739, 285101, 285184, 443433, 168414, 169872, 439925, 439633, 552915, 564845, 595415, 353435, 435797, 291114, 533420, 293143, 293919, 495281, 241291, 295627, 427993, 236705, 302038, 302129, 640426, 624151, 640323, 414315, 229670, 531772, 411586, 309076, 591979, 312277, 313115, 549618, 315186, 507958, 403070, 316578, 631560, 601485, 626207, 391576, 513346, 545483, 590237, 388369, 589805, 579721, 384416, 656387, 516897, 380786, 188130, 545064, 581464, 188993, 582137, 520046, 375074, 374801, 521144, 336396, 212512, 190308, 372648, 371736, 542791, 525420, 370942, 338042, 370828, 191170, 540887, 367923, 208683, 528172, 363582, 633602, 630635, 362453, 538227, 344635, 359634, 359449, 534850, 346346, 156838, 259985, 596396, 261813, 255656, 439584, 263080, 592078, 264643, 254109, 267836, 273318, 446476, 277873, 581355, 605787, 580910, 244838, 280160, 280446, 281285, 244805, 578242, 577430, 608470, 574659, 290656, 453071, 570365, 295754, 453920, 233303, 302378, 229134, 456811, 229006, 426008, 309791, 225967, 458417, 314010, 221695, 318698, 618202, 619013, 549714, 620225, 324661, 462023, 212283, 543500, 542933, 329141, 462235, 623211, 330640, 462725, 540530, 419807, 333217, 538714, 624192, 536451, 206227, 535782, 204354, 464851, 201630, 343380, 343552, 531338, 353154, 519537, 516636, 360180, 360255, 638233, 365017, 508094, 642116, 370580, 176274, 498644, 646805, 493956, 649786, 490909, 650921, 475828, 489421, 488816, 161484, 392800, 654868, 396159, 656114, 324090, 409982, 410684, 409722, 396629, 233236, 396011, 217993, 229558, 430160, 256085, 455417, 534826, 394960, 626367, 251974, 427737, 514964, 284905, 304484, 304541, 219654, 304664, 351032, 195615, 626150, 570347, 535651, 451696, 286445, 298332, 499407, 528411, 286613, 266301, 595298, 286645, 433116, 407417, 346772, 346215, 533066, 234016, 461465, 586440, 366352, 532952, 411597, 490863, 640517, 269625, 620246, 342099, 271529, 311717, 339937, 642030, 506310, 605776, 313131, 589940, 580928, 208136, 242586, 436738, 642970, 337143, 385972, 314138, 657703, 447429, 483001, 606641, 261073, 656336, 644757, 607147, 333254, 580702, 316659, 446722, 146227, 457146, 537190, 262101, 234999, 235067, 330177, 375837, 580794, 509290, 293268, 585313, 420894, 293891, 420633, 294145, 295145, 560131, 225255, 278521, 182620, 325542, 481237, 593799, 523368, 468392, 324356, 538295, 481079

Task 4.3 results end
